{"version":3,"sources":["logo.svg","axios.js","requests.js","Row.js","Nav.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b50c72c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL : 'https://api.themoviedb.org/3',\r\n});\r\n\r\nexport default instance;","const API_KEY = '5970222db6dedd07cc7c6d87660be634';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\r\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\n\r\nexport default requests; ","import React, {useState,useEffect} from 'react';\r\nimport axios from './axios';\r\nimport requests from \"./requests\";\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row({title,fetchUrl, isLargeRow}) {\r\n    const [movies,setMovies] = useState([]);\r\n    const [trailerUrl,setTrailerUrl] = useState(\"\");\r\n\r\n    // A snippet of code which runs based\r\n    useEffect(() => {\r\n        // if [] run once when the row load and never run again\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n     const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n      },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        }else{\r\n            movieTrailer(movie?.title || movie?.name || movie?.original_name || \"\")\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n            {/* several row_poster*/}\r\n            {movies.map(movie =>(\r\n                <img\r\n                    onClick={()=> handleClick(movie)}\r\n                    key={movie.id}\r\n                    className={`row_poster ${isLargeRow && \"row_posterLarge\"} `}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n            ))}\r\n\r\n            </div>\r\n        {trailerUrl && <Youtube videoId ={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    },[]) //make the code to run once when page loads\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n            className=\"nav__logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\" \r\n            alt=\"Netflix\"/>\r\n            \r\n            <img \r\n            className=\"nav__avatar\" \r\n            src=\"https://unavatar.now.sh/twitter/MicCrook\" \r\n            alt=\"Netflix\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner() {\r\n    const [movie,setMovie] = useState([]);\r\n\r\n    // using useEffect \r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length -1)\r\n                ]);\r\n                return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n    console.log(movie);\r\n\r\n    function truncate(str, n){\r\n        return str ?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n            style = {{\r\n                backgroundSize:\"cover\",\r\n                backgroundImage: `url(\r\n                    https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\r\n                )`,\r\n                backgroundPosition:\"center center\"\r\n            }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import logo from './logo.svg';\nimport Row from './Row';\nimport './App.css';\nimport requests from './requests';\nimport Nav from './Nav';\nimport Banner from './Banner';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav/>\n      <Banner/>\n      <Row \n        title=\"NETFLIX ORIGINALS\" \n        fetchUrl={requests.fetchNetflixOriginals\n      }\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl ={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl ={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl ={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl ={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl ={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl ={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl ={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}